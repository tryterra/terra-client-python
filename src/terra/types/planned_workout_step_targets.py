# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel, UnionMetadata
from .cadence_planned_workout_step_target_target_type import CadencePlannedWorkoutStepTargetTargetType
from .hr_planned_workout_step_target_target_type import HrPlannedWorkoutStepTargetTargetType
from .if_planned_workout_step_target_target_type import IfPlannedWorkoutStepTargetTargetType
from .pace_planned_workout_step_target_target_type import PacePlannedWorkoutStepTargetTargetType
from .planned_workout_step_target_target_type import PlannedWorkoutStepTargetTargetType
from .power_planned_workout_step_target_target_type import PowerPlannedWorkoutStepTargetTargetType
from .repetition_planned_workout_step_target_target_type import RepetitionPlannedWorkoutStepTargetTargetType
from .speed_planned_workout_step_target_target_type import SpeedPlannedWorkoutStepTargetTargetType
from .swim_stroke_planned_workout_step_target_target_type import SwimStrokePlannedWorkoutStepTargetTargetType
from .tss_planned_workout_step_target_target_type import TssPlannedWorkoutStepTargetTargetType


class PlannedWorkoutStepTargets_PlannedWorkoutStepTarget(UncheckedBaseModel):
    type: typing.Literal["PlannedWorkoutStepTarget"] = "PlannedWorkoutStepTarget"
    target_type: typing.Optional[PlannedWorkoutStepTargetTargetType] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PlannedWorkoutStepTargets_CadencePlannedWorkoutStepTarget(UncheckedBaseModel):
    type: typing.Literal["CadencePlannedWorkoutStepTarget"] = "CadencePlannedWorkoutStepTarget"
    cadence: typing.Optional[int] = None
    target_type: typing.Optional[CadencePlannedWorkoutStepTargetTargetType] = None
    cadence_low: typing.Optional[int] = None
    cadence_high: typing.Optional[int] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PlannedWorkoutStepTargets_HrPlannedWorkoutStepTarget(UncheckedBaseModel):
    type: typing.Literal["HRPlannedWorkoutStepTarget"] = "HRPlannedWorkoutStepTarget"
    hr_percentage_low: typing.Optional[float] = None
    target_type: typing.Optional[HrPlannedWorkoutStepTargetTargetType] = None
    hr_percentage_high: typing.Optional[float] = None
    hr_percentage: typing.Optional[float] = None
    hr_bpm_high: typing.Optional[int] = None
    hr_bpm_low: typing.Optional[int] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PlannedWorkoutStepTargets_PowerPlannedWorkoutStepTarget(UncheckedBaseModel):
    type: typing.Literal["PowerPlannedWorkoutStepTarget"] = "PowerPlannedWorkoutStepTarget"
    target_type: typing.Optional[PowerPlannedWorkoutStepTargetTargetType] = None
    power_percentage_low: typing.Optional[float] = None
    power_percentage_high: typing.Optional[float] = None
    power_watt_high: typing.Optional[int] = None
    power_watt_low: typing.Optional[int] = None
    power_watt: typing.Optional[int] = None
    power_percentage: typing.Optional[float] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PlannedWorkoutStepTargets_SpeedPlannedWorkoutStepTarget(UncheckedBaseModel):
    type: typing.Literal["SpeedPlannedWorkoutStepTarget"] = "SpeedPlannedWorkoutStepTarget"
    target_type: typing.Optional[SpeedPlannedWorkoutStepTargetTargetType] = None
    speed_percentage_high: typing.Optional[float] = None
    speed_percentage_low: typing.Optional[float] = None
    speed_percentage: typing.Optional[float] = None
    speed_meters_per_second: typing.Optional[float] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PlannedWorkoutStepTargets_PacePlannedWorkoutStepTarget(UncheckedBaseModel):
    type: typing.Literal["PacePlannedWorkoutStepTarget"] = "PacePlannedWorkoutStepTarget"
    target_type: typing.Optional[PacePlannedWorkoutStepTargetTargetType] = None
    pace_minutes_per_kilometer: typing.Optional[float] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PlannedWorkoutStepTargets_TssPlannedWorkoutStepTarget(UncheckedBaseModel):
    type: typing.Literal["TSSPlannedWorkoutStepTarget"] = "TSSPlannedWorkoutStepTarget"
    target_type: typing.Optional[TssPlannedWorkoutStepTargetTargetType] = None
    tss: typing.Optional[float] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PlannedWorkoutStepTargets_IfPlannedWorkoutStepTarget(UncheckedBaseModel):
    type: typing.Literal["IFPlannedWorkoutStepTarget"] = "IFPlannedWorkoutStepTarget"
    if_high: typing.Optional[float] = None
    target_type: typing.Optional[IfPlannedWorkoutStepTargetTargetType] = None
    if_low: typing.Optional[float] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PlannedWorkoutStepTargets_RepetitionPlannedWorkoutStepTarget(UncheckedBaseModel):
    type: typing.Literal["RepetitionPlannedWorkoutStepTarget"] = "RepetitionPlannedWorkoutStepTarget"
    target_type: typing.Optional[RepetitionPlannedWorkoutStepTargetTargetType] = None
    repetitions: typing.Optional[float] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PlannedWorkoutStepTargets_SwimStrokePlannedWorkoutStepTarget(UncheckedBaseModel):
    type: typing.Literal["SwimStrokePlannedWorkoutStepTarget"] = "SwimStrokePlannedWorkoutStepTarget"
    target_type: typing.Optional[SwimStrokePlannedWorkoutStepTargetTargetType] = None
    swim_strokes: typing.Optional[int] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


PlannedWorkoutStepTargets = typing_extensions.Annotated[
    typing.Union[
        PlannedWorkoutStepTargets_PlannedWorkoutStepTarget,
        PlannedWorkoutStepTargets_CadencePlannedWorkoutStepTarget,
        PlannedWorkoutStepTargets_HrPlannedWorkoutStepTarget,
        PlannedWorkoutStepTargets_PowerPlannedWorkoutStepTarget,
        PlannedWorkoutStepTargets_SpeedPlannedWorkoutStepTarget,
        PlannedWorkoutStepTargets_PacePlannedWorkoutStepTarget,
        PlannedWorkoutStepTargets_TssPlannedWorkoutStepTarget,
        PlannedWorkoutStepTargets_IfPlannedWorkoutStepTarget,
        PlannedWorkoutStepTargets_RepetitionPlannedWorkoutStepTarget,
        PlannedWorkoutStepTargets_SwimStrokePlannedWorkoutStepTarget,
    ],
    UnionMetadata(discriminant="type"),
]
