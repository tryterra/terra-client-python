# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel, UnionMetadata
from .calories_planned_workout_step_duration_duration_type import CaloriesPlannedWorkoutStepDurationDurationType
from .distance_planned_workout_step_duration_duration_type import DistancePlannedWorkoutStepDurationDurationType
from .fixed_rest_planned_workout_step_duration_duration_type import FixedRestPlannedWorkoutStepDurationDurationType
from .hr_above_planned_workout_step_duration_duration_type import HrAbovePlannedWorkoutStepDurationDurationType
from .hr_below_planned_workout_step_duration_duration_type import HrBelowPlannedWorkoutStepDurationDurationType
from .planned_workout_step_duration_duration_type import PlannedWorkoutStepDurationDurationType
from .power_above_planned_workout_step_duration_duration_type import PowerAbovePlannedWorkoutStepDurationDurationType
from .power_below_planned_workout_step_duration_duration_type import PowerBelowPlannedWorkoutStepDurationDurationType
from .reps_planned_workout_step_duration_duration_type import RepsPlannedWorkoutStepDurationDurationType
from .steps_planned_workout_step_duration_duration_type import StepsPlannedWorkoutStepDurationDurationType
from .time_planned_workout_step_duration_duration_type import TimePlannedWorkoutStepDurationDurationType


class PlannedWorkoutStepDurations_PlannedWorkoutStepDuration(UncheckedBaseModel):
    type: typing.Literal["PlannedWorkoutStepDuration"] = "PlannedWorkoutStepDuration"
    duration_type: typing.Optional[PlannedWorkoutStepDurationDurationType] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PlannedWorkoutStepDurations_TimePlannedWorkoutStepDuration(UncheckedBaseModel):
    type: typing.Literal["TimePlannedWorkoutStepDuration"] = "TimePlannedWorkoutStepDuration"
    seconds: typing.Optional[int] = None
    duration_type: typing.Optional[TimePlannedWorkoutStepDurationDurationType] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PlannedWorkoutStepDurations_PowerAbovePlannedWorkoutStepDuration(UncheckedBaseModel):
    type: typing.Literal["PowerAbovePlannedWorkoutStepDuration"] = "PowerAbovePlannedWorkoutStepDuration"
    power_above_watts: typing.Optional[int] = None
    duration_type: typing.Optional[PowerAbovePlannedWorkoutStepDurationDurationType] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PlannedWorkoutStepDurations_PowerBelowPlannedWorkoutStepDuration(UncheckedBaseModel):
    type: typing.Literal["PowerBelowPlannedWorkoutStepDuration"] = "PowerBelowPlannedWorkoutStepDuration"
    power_below_watts: typing.Optional[int] = None
    duration_type: typing.Optional[PowerBelowPlannedWorkoutStepDurationDurationType] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PlannedWorkoutStepDurations_FixedRestPlannedWorkoutStepDuration(UncheckedBaseModel):
    type: typing.Literal["FixedRestPlannedWorkoutStepDuration"] = "FixedRestPlannedWorkoutStepDuration"
    duration_type: typing.Optional[FixedRestPlannedWorkoutStepDurationDurationType] = None
    rest_seconds: typing.Optional[int] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PlannedWorkoutStepDurations_CaloriesPlannedWorkoutStepDuration(UncheckedBaseModel):
    type: typing.Literal["CaloriesPlannedWorkoutStepDuration"] = "CaloriesPlannedWorkoutStepDuration"
    calories: typing.Optional[int] = None
    duration_type: typing.Optional[CaloriesPlannedWorkoutStepDurationDurationType] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PlannedWorkoutStepDurations_HrAbovePlannedWorkoutStepDuration(UncheckedBaseModel):
    type: typing.Literal["HRAbovePlannedWorkoutStepDuration"] = "HRAbovePlannedWorkoutStepDuration"
    duration_type: typing.Optional[HrAbovePlannedWorkoutStepDurationDurationType] = None
    hr_above_bpm: typing.Optional[int] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PlannedWorkoutStepDurations_HrBelowPlannedWorkoutStepDuration(UncheckedBaseModel):
    type: typing.Literal["HRBelowPlannedWorkoutStepDuration"] = "HRBelowPlannedWorkoutStepDuration"
    hr_below_bpm: typing.Optional[int] = None
    duration_type: typing.Optional[HrBelowPlannedWorkoutStepDurationDurationType] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PlannedWorkoutStepDurations_RepsPlannedWorkoutStepDuration(UncheckedBaseModel):
    type: typing.Literal["RepsPlannedWorkoutStepDuration"] = "RepsPlannedWorkoutStepDuration"
    reps: typing.Optional[int] = None
    duration_type: typing.Optional[RepsPlannedWorkoutStepDurationDurationType] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PlannedWorkoutStepDurations_DistancePlannedWorkoutStepDuration(UncheckedBaseModel):
    type: typing.Literal["DistancePlannedWorkoutStepDuration"] = "DistancePlannedWorkoutStepDuration"
    duration_type: typing.Optional[DistancePlannedWorkoutStepDurationDurationType] = None
    distance_meters: typing.Optional[int] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PlannedWorkoutStepDurations_StepsPlannedWorkoutStepDuration(UncheckedBaseModel):
    type: typing.Literal["StepsPlannedWorkoutStepDuration"] = "StepsPlannedWorkoutStepDuration"
    steps: typing.Optional[int] = None
    duration_type: typing.Optional[StepsPlannedWorkoutStepDurationDurationType] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


PlannedWorkoutStepDurations = typing_extensions.Annotated[
    typing.Union[
        PlannedWorkoutStepDurations_PlannedWorkoutStepDuration,
        PlannedWorkoutStepDurations_TimePlannedWorkoutStepDuration,
        PlannedWorkoutStepDurations_PowerAbovePlannedWorkoutStepDuration,
        PlannedWorkoutStepDurations_PowerBelowPlannedWorkoutStepDuration,
        PlannedWorkoutStepDurations_FixedRestPlannedWorkoutStepDuration,
        PlannedWorkoutStepDurations_CaloriesPlannedWorkoutStepDuration,
        PlannedWorkoutStepDurations_HrAbovePlannedWorkoutStepDuration,
        PlannedWorkoutStepDurations_HrBelowPlannedWorkoutStepDuration,
        PlannedWorkoutStepDurations_RepsPlannedWorkoutStepDuration,
        PlannedWorkoutStepDurations_DistancePlannedWorkoutStepDuration,
        PlannedWorkoutStepDurations_StepsPlannedWorkoutStepDuration,
    ],
    UnionMetadata(discriminant="type"),
]
