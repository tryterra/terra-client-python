# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel, UnionMetadata
from .cardio_planned_workout_step_exercise_category import CardioPlannedWorkoutStepExerciseCategory
from .planned_workout_step import PlannedWorkoutStep
from .planned_workout_step_duration import PlannedWorkoutStepDuration
from .planned_workout_step_durations import PlannedWorkoutStepDurations
from .planned_workout_step_intensity import PlannedWorkoutStepIntensity
from .planned_workout_step_target import PlannedWorkoutStepTarget
from .planned_workout_step_targets import PlannedWorkoutStepTargets
from .strength_planned_workout_step_exercise_category import StrengthPlannedWorkoutStepExerciseCategory
from .swimming_planned_workout_step_equipment_type import SwimmingPlannedWorkoutStepEquipmentType
from .swimming_planned_workout_step_stroke_type import SwimmingPlannedWorkoutStepStrokeType


class PlannedWorkoutSteps_PlannedWorkoutStep(UncheckedBaseModel):
    type: typing.Literal["PlannedWorkoutStep"] = "PlannedWorkoutStep"
    targets: typing.Optional[typing.List[PlannedWorkoutStepTargets]] = None
    intensity: typing.Optional[PlannedWorkoutStepIntensity] = None
    order: typing.Optional[int] = None
    description: typing.Optional[str] = None
    durations: typing.Optional[typing.List[PlannedWorkoutStepDurations]] = None
    name: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PlannedWorkoutSteps_PlannedWorkoutRepeatStep(UncheckedBaseModel):
    type: typing.Literal["PlannedWorkoutRepeatStep"] = "PlannedWorkoutRepeatStep"
    targets: typing.Optional[typing.List[PlannedWorkoutStepTarget]] = None
    steps: typing.Optional[typing.List[PlannedWorkoutStep]] = None
    intensity: typing.Optional[int] = None
    order: typing.Optional[int] = None
    description: typing.Optional[str] = None
    durations: typing.Optional[typing.List[PlannedWorkoutStepDuration]] = None
    name: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PlannedWorkoutSteps_SwimmingPlannedWorkoutStep(UncheckedBaseModel):
    type: typing.Literal["SwimmingPlannedWorkoutStep"] = "SwimmingPlannedWorkoutStep"
    targets: typing.Optional[typing.List[PlannedWorkoutStepTarget]] = None
    intensity: typing.Optional[int] = None
    order: typing.Optional[int] = None
    equipment_type: typing.Optional[SwimmingPlannedWorkoutStepEquipmentType] = None
    description: typing.Optional[str] = None
    durations: typing.Optional[typing.List[PlannedWorkoutStepDuration]] = None
    name: typing.Optional[str] = None
    stroke_type: typing.Optional[SwimmingPlannedWorkoutStepStrokeType] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PlannedWorkoutSteps_CardioPlannedWorkoutStep(UncheckedBaseModel):
    type: typing.Literal["CardioPlannedWorkoutStep"] = "CardioPlannedWorkoutStep"
    targets: typing.Optional[typing.List[PlannedWorkoutStepTarget]] = None
    intensity: typing.Optional[int] = None
    order: typing.Optional[int] = None
    exercise_name: typing.Optional[str] = None
    description: typing.Optional[str] = None
    durations: typing.Optional[typing.List[PlannedWorkoutStepDuration]] = None
    exercise_category: typing.Optional[CardioPlannedWorkoutStepExerciseCategory] = None
    name: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PlannedWorkoutSteps_StrengthPlannedWorkoutStep(UncheckedBaseModel):
    type: typing.Literal["StrengthPlannedWorkoutStep"] = "StrengthPlannedWorkoutStep"
    weight_kg: typing.Optional[float] = None
    targets: typing.Optional[typing.List[PlannedWorkoutStepTarget]] = None
    intensity: typing.Optional[int] = None
    order: typing.Optional[int] = None
    exercise_name: typing.Optional[str] = None
    description: typing.Optional[str] = None
    durations: typing.Optional[typing.List[PlannedWorkoutStepDuration]] = None
    exercise_category: typing.Optional[StrengthPlannedWorkoutStepExerciseCategory] = None
    name: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PlannedWorkoutSteps_YogaPlannedWorkoutStep(UncheckedBaseModel):
    type: typing.Literal["YogaPlannedWorkoutStep"] = "YogaPlannedWorkoutStep"
    targets: typing.Optional[typing.List[PlannedWorkoutStepTarget]] = None
    intensity: typing.Optional[int] = None
    order: typing.Optional[int] = None
    description: typing.Optional[str] = None
    durations: typing.Optional[typing.List[PlannedWorkoutStepDuration]] = None
    name: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PlannedWorkoutSteps_PilatesPlannedWorkoutStep(UncheckedBaseModel):
    type: typing.Literal["PilatesPlannedWorkoutStep"] = "PilatesPlannedWorkoutStep"
    targets: typing.Optional[typing.List[PlannedWorkoutStepTarget]] = None
    intensity: typing.Optional[int] = None
    order: typing.Optional[int] = None
    description: typing.Optional[str] = None
    durations: typing.Optional[typing.List[PlannedWorkoutStepDuration]] = None
    name: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PlannedWorkoutSteps_RunningPlannedWorkoutStep(UncheckedBaseModel):
    type: typing.Literal["RunningPlannedWorkoutStep"] = "RunningPlannedWorkoutStep"
    targets: typing.Optional[typing.List[PlannedWorkoutStepTarget]] = None
    intensity: typing.Optional[int] = None
    order: typing.Optional[int] = None
    description: typing.Optional[str] = None
    durations: typing.Optional[typing.List[PlannedWorkoutStepDuration]] = None
    name: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PlannedWorkoutSteps_CyclingPlannedWorkoutStep(UncheckedBaseModel):
    type: typing.Literal["CyclingPlannedWorkoutStep"] = "CyclingPlannedWorkoutStep"
    targets: typing.Optional[typing.List[PlannedWorkoutStepTarget]] = None
    intensity: typing.Optional[int] = None
    order: typing.Optional[int] = None
    description: typing.Optional[str] = None
    durations: typing.Optional[typing.List[PlannedWorkoutStepDuration]] = None
    name: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


PlannedWorkoutSteps = typing_extensions.Annotated[
    typing.Union[
        PlannedWorkoutSteps_PlannedWorkoutStep,
        PlannedWorkoutSteps_PlannedWorkoutRepeatStep,
        PlannedWorkoutSteps_SwimmingPlannedWorkoutStep,
        PlannedWorkoutSteps_CardioPlannedWorkoutStep,
        PlannedWorkoutSteps_StrengthPlannedWorkoutStep,
        PlannedWorkoutSteps_YogaPlannedWorkoutStep,
        PlannedWorkoutSteps_PilatesPlannedWorkoutStep,
        PlannedWorkoutSteps_RunningPlannedWorkoutStep,
        PlannedWorkoutSteps_CyclingPlannedWorkoutStep,
    ],
    UnionMetadata(discriminant="type"),
]
